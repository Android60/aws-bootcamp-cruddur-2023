AWSTemplateFormatVersion: 2010-09-09
Description: |
  Setup ECS cluster
Parameters:
  CertificateArn:
    Type: String
  FrontendPort:
    Type: Number
    Default: 3000
  BackendPort:
    Type: Number
    Default: 4567
# Mappings:
Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub ${AWS::StackName}-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Subnets:
      - !Ref SubnetA
      - !Ref SubnetB
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Scheme: 'internet-facing'
      Certificates:
        - CertificateArn: !Ref CertificateArn
  Listener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
  ApiListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: host-header
          HttpHeaderConfig:
            Values:
              - api.cruddur.myhomelab.xyz
      ListenerArn: !Ref Listener443
      Priority: 1
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ALB-SG
      GroupDescription: Allow http and https
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Sub ${AWS::StackName}-frontend-tg
      TargetType: ip
      Port: !Ref FrontendPort
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Sub ${AWS::StackName}-backend-tg
      TargetType: ip
      Port: !Ref BackendPort

# Outputs:
# Metadata: