AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref API
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 30000
      ConnectionType: INTERNET
      IntegrationUri: !GetAtt UploadAvatarLambda.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
  AuthorizerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Authorizer-role
      AssumeRolePolicyDocument: |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  AuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Role: !GetAtt AuthorizerLambdaExecutionRole.Arn
      Handler: index.handler
      Timeout: 3
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Architectures:
        - x86_64
      Environment:
        Variables:
          CLIENT_ID: "{{resolve:ssm:/cruddur/cognito/CLIENT_ID}}"
          USER_POOL_ID: "{{resolve:ssm:/cruddur/cognito/USER_POOL_ID}}"
      Code: .artifacts/authorizer.zip
      Description: Authorizer function for API GW
  UploadAvatarLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UploadAvatarLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/avatars/key_upload'
  ProxyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UploadAvatarLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/{proxy+}'
  AuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/authorizers/${Authorizer}'
  UploadAvatarLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: ruby3.3
      Role: !GetAtt UploadAvatarLambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Timeout: 3
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Architectures:
        - x86_64
      Environment:
        Variables:
          UPLOADS_BUCKET_NAME: "uploaded-avatars.cruddur.myhomelab.xyz"
      Code: .artifacts/lambda.zip
      Description: Generates presigned S3 URL
  UploadAvatarLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-UploadAvatarLambda-role
      AssumeRolePolicyDocument: |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: [
      {
        "PolicyName": "Cruddur-Avatar-Upload-AllowS3putObject",
        "PolicyDocument": 
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": "s3:PutObject",
                  "Resource": "arn:aws:s3:::uploaded-avatars.cruddur.myhomelab.xyz/*"
                }
              ]
            }
        }
      ]
  API:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub ${AWS::StackName}-Avatar-Upload
      ProtocolType: HTTP
      RouteSelectionExpression: $request.method $request.path
      ApiKeySelectionExpression: $request.header.x-api-key
      DisableExecuteApiEndpoint: False
  ApiGwUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cruddur/frontend/API_GATEWAY_URL
      Type: String
      Value: !GetAtt API.ApiEndpoint
      Description: AWS API Gateway endpoint
  Authorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: !Sub ${AWS::StackName}-JWTAuthorizer
      ApiId: !Ref API
      AuthorizerType: REQUEST
      AuthorizerUri: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt AuthorizerLambda.Arn
          - /invocations
      AuthorizerResultTtlInSeconds: 0
      AuthorizerPayloadFormatVersion: '2.0'
      EnableSimpleResponses: True
      IdentitySource:
        - "$request.header.Authorization"
  AvatarUploadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      RouteKey: 'POST /avatars/key_upload'
      Target: !Join 
        - /
        - - integrations
          - !Ref LambdaIntegration
  ProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      AuthorizationType: NONE
      RouteKey: 'OPTIONS /{proxy+}'
      Target: !Join 
        - /
        - - integrations
          - !Ref LambdaIntegration
  Stage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: $default
      Description: Default Stage
      AutoDeploy: true
      ApiId: !Ref API
      DefaultRouteSettings:
        DetailedMetricsEnabled: false
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10